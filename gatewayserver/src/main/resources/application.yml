server:
  port: 8072

spring:
  application:
    name: gatewayserver
  config:
    import: "optional:configserver:http://localhost:8071/"

  # Connect to discovery (eureka) server and locate the microservices
  cloud:
    gateway:
      discovery:
        locator:
          enabled: false
          lowerCaseServiceId: true
      httpclient:
          connect-timeout: 1000
          response-timeout: 10s

  # Use redis for rate limiter
  data:
    redis:
      connect-timeout: 2s
      host: localhost
      port: 6379
      timeout: 1s

  security:
    oauth2:
     resourceserver:
       jwt:
         jwk-set-uri: "http://localhost:7080/realms/master/protocol/openid-connect/certs"

management:
  endpoints:
    web:
      exposure:
        include: "*"
  info:
    env:
      enabled: true
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    shutdown:
      enabled: true # Enable an actuator endpoint to manually shutdown the service (for testing)
    health:
      probes:
        enabled: true
    gateway:
      enabled: true
  # tags for metrics in Prometheus
  metrics:
    tags:
     application: ${spring.application.name}

eureka:
  instance:
    preferIpAddress: true # When DNS names are not available
  client:
    fetchRegistry: true # Default
    registerWithEureka: true # Default
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/ # Eureka server URL

info:
  app:
    name: gateway
    description: Demo bank gateway service
    version: 0.8.0

logging:
  level:
    com:
      demo:
        bank:
          gatewayserver: DEBUG
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 10
      permittedNumberOfCallsInHalfOpenState: 2
      failureRateThreshold: 50
      waitDurationInOpenState: 10000